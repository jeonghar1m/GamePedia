{"version":3,"sources":["components/Config.js","components/Pages/LandingPage/LandingPage.js","components/Pages/MovieDetailPage/Sections/MovieInfo.js","components/Pages/MovieDetailPage/Sections/CreditsInfo.js","components/Pages/MovieDetailPage/MovieDetailPage.js","components/Pages/MovieDetailPage/OverView/MovieOverView.js","components/Pages/MemberPage/LoginPage.js","components/Pages/MemberPage/RegisterPage.js","App.js","reportWebVitals.js","index.js"],"names":["siteTitle","movieLang","countriesLang","movieApiBaseUrl","movieImageBaseUrl","MainPage","props","state","items","mode","page","infiniteScroll","bind","this","scrollHeight","Math","max","document","documentElement","body","scrollTop","clientHeight","setState","fetchMovies","a","title","window","addEventListener","removeEventListener","movieInfo","process","fetch","then","res","json","data","index","results","length","poster_path","id","console","log","catch","err","className","map","item","href","src","width","height","alt","Component","MovieInfo","movie","release_date","Date","getFullYear","production_countries","name","genres","runtime","style","margin","overview","CreditsInfo","credits","director","crew","filter","job","profile_path","cast","character","MovieDetailPage","movieItems","creditsItems","creditsToggle","api_key","movieId","match","params","creditsInfo","spoken_languages","english_name","iso_3166_1","overviewURL","targetSetting","homepage","display","target","float","MovieOverView","preURL","original_title","countries","lang","vote_average","LoginPage","useEffect","method","type","required","Button","variant","RegisterPage","App","exact","path","component","Login","Register","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.47397542.chunk.js","sourcesContent":["export const siteTitle = '마이무비리스트';\nexport const movieLang = {\"English\": \"영어\", \"Korean\": \"한국어\", \"German\": \"독일어\", \"Spanish\": \"스페인어\", \"Japanese\": \"일본어\", \"Mandarin\": \"표준 중국어\", \"French\": \"불어\", \"Dutch\": \"네덜란드어\", \"Turkish\": \"터키어\", \"Finnish\": \"핀란드어\", \"Swedish\": \"스웨덴어\", \"Russian\": \"러시아어\", \"Portuguese\": \"포르투갈어\", \"Swahili\": \"스와힐리어\"};\nexport const countriesLang = {\"US\": \"미국\", \"KR\": \"대한민국\", \"JP\": \"일본\", \"BE\": \"벨기에\", \"NL\": \"네덜란드\", \"CN\": \"중국\", \"TW\": \"대만\", \"GB\": \"영국\", \"RU\": \"러시아\", \"ZA\": \"남아프리카공화국\", \"CA\": \"캐나다\", \"FR\": \"프랑스\", \"MA\": \"모로코\", \"KE\": \"케냐\"};\nexport const movieApiBaseUrl = 'https://api.themoviedb.org/3/movie/';\nexport const movieImageBaseUrl = 'http://image.tmdb.org/t/p/';","import React, {Component} from 'react';\nimport {siteTitle, movieApiBaseUrl, movieImageBaseUrl} from '../../Config';\n\nclass MainPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            mode: \"Loading\",\n            page: 1\n        }\n        this.infiniteScroll = this.infiniteScroll.bind(this);\n    }\n\n    infiniteScroll() {\n        const {page} = this.state;\n        let scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n        let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n        let clientHeight = document.documentElement.clientHeight;\n        if(scrollTop + clientHeight >= scrollHeight) {\n            this.setState({\n                page: page + 1\n            })\n            this.fetchMovies();\n        }\n    }\n\n    async componentDidMount() {\n        document.title = siteTitle;  // change the title\n\n        this.fetchMovies();\n\n        window.addEventListener('scroll', this.infiniteScroll, true);\n    }\n\n    async componentWillUnmount() {\n        window.removeEventListener('scroll', this.infiniteScroll, true);\n    }\n\n    fetchMovies() {\n        const {page, items} = this.state;\n        const api_key = process.env.REACT_APP_MOVIEDB_API_KEY;\n        const movieInfo = `${movieApiBaseUrl}popular?api_key=${api_key}&language=ko-KR&page=${page}`;\n\n        fetch(movieInfo)\n            .then(res => res.json())\n            .then(data => {\n                for(let index = 0; index < data.results.length; index++) {\n                    data.results[index].poster_path = `${movieImageBaseUrl}original${data.results[index].poster_path}`;\n                    data.results[index].id = `/movie/${data.results[index].id}`;\n                }\n\n                this.setState({\n                    items: [...items, ...data.results],\n                    mode: \"Normal\",\n                    page: data.page\n                })\n                console.log(data);\n            })\n            .catch(err => {\n                this.setState({\n                    mode: \"404\"\n                })\n            });\n    }\n\n    loadMoreMovies(page) {\n        const api_key = process.env.REACT_APP_MOVIEDB_API_KEY;\n        const movieInfo = `${movieApiBaseUrl}popular?api_key=${api_key}&language=ko-KR&page=${page + 1}`;\n\n        this.fetchMovies(movieInfo);\n    }\n\n    render() {\n        const {mode, items} = this.state;\n\n        if(mode === \"Loading\") {\n            return (\n                <section className=\"inner\">\n                    <h2>Loading...</h2>\n                </section>\n            );\n        }\n        else if(mode === \"404\") {\n            return (\n                <section className=\"inner\">\n                    <h2>404 Not Found.</h2>\n                </section>\n            ); \n        }\n        return (\n            <section className=\"inner\">\n                <h2>영화 TOP</h2>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        {items.map(item => (\n                            <div className=\"col col-xl-3 col-md-6 col-12\" key={item.title}>\n                                <div><a href={item.id}><img src={item.poster_path} width=\"100%\" height=\"95%\" alt={item.title}></img></a></div>\n                                <div className=\"movie_name\">{item.title}</div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </section>\n        );\n    }\n\n}\n\nexport default MainPage;","import React from 'react'\n\nfunction MovieInfo(props) {\n    const {movie} = props;\n\n    const release_date = new Date(movie.release_date); // 개봉연도만 가져오기 위한 상수 선언\n\n    return (\n        <div>\n            <p><b>기본 정보</b></p>\n            <div>{release_date.getFullYear()} · {movie.production_countries[0].name} · {movie.genres[0].name}</div>\n            <div>{movie.runtime}분</div>\n            <p style={{margin: '1% 0'}}>{movie.overview}</p>\n        </div>\n    )\n}\n\nexport default MovieInfo","import React from 'react';\nimport {movieImageBaseUrl} from '../../../Config';\n\nfunction CreditsInfo(props) {\n    const {credits} = props;\n    const director = credits.crew.filter(crew => (crew.job === \"Director\"));\n\n    for(let index = 0; index < director.length; index++)\n        if(director[index].profile_path !== null)\n            director[index].profile_path = `${movieImageBaseUrl}original${director[index].profile_path}`\n        else\n            director[index].profile_path = 'https://i.imgur.com/v2uZO3u.jpg';\n\n    console.log(director);\n    \n    return (\n        <div>\n            {/* <div><b>감독: </b>{director.map((director, index) => (<span key={director.name}>{director.name}{index < director.length - 1 ? ',\\u00A0' : ''}</span>))}</div> */}\n            <p><b>감독</b></p>\n            <div className=\"container\">\n                <div className=\"row\">\n                    {director.map(director => (\n                        <div className=\"col col-xl-3 col-md-6 col-12\" key={director.name}>\n                            <div><img src={director.profile_path} width=\"100%\" height=\"95%\" alt={director.profile_path}></img></div>\n                            <div className=\"person_name\">{director.name}</div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n\n            {/* <ul>\n                {director.map(director => (\n                    <li key=\"director\">{director.name}</li>\n                ))}\n            </ul> */}\n            <p><b>출연</b></p>\n            <div className=\"container\">\n                <div className=\"row\">\n                    {credits.cast.map(cast => (\n                        <div className=\"col col-xl-3 col-md-6 col-12\" key={cast.name}>\n                            <div><img src={cast.profile_path} width=\"100%\" height=\"95%\" alt={cast.profile_path}></img></div>\n                            <div className=\"person_name\">{cast.name} - {cast.character} 역</div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CreditsInfo\n","import React, {Component} from 'react';\nimport MovieInfo from './Sections/MovieInfo';\nimport CreditsInfo from './Sections/CreditsInfo';\nimport {siteTitle, movieLang, countriesLang, movieApiBaseUrl, movieImageBaseUrl} from '../../Config';\n\nclass MovieDetailPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movieItems: [],\n            creditsItems: [],\n            creditsToggle: false,\n            mode: \"Loading\"\n        }\n    }\n\n    async componentDidMount() {\n        const api_key = process.env.REACT_APP_MOVIEDB_API_KEY;\n\n        const movieId = this.props.match.params.movieId;\n\n        const creditsInfo = `${movieApiBaseUrl}${movieId}/credits?api_key=${api_key}`;\n        const movieInfo = `${movieApiBaseUrl}${movieId}?api_key=${api_key}&language=ko-KR`;\n\n        fetch(movieInfo)\n            .then(res => res.json())\n            .then(data => {\n                data.poster_path = `${movieImageBaseUrl}original${data.poster_path}`;\n\n                document.title = `${data.title} - ${siteTitle}`;  // change the title\n\n                // 언어 data값 문자열 한국어로 번역\n                for(let index = 0; index < data.spoken_languages.length; index++)\n                    data.spoken_languages[index].name = movieLang[data.spoken_languages[index].english_name];\n                \n                for(let index = 0; index < data.production_countries.length; index++)\n                    data.production_countries[index].name = countriesLang[data.production_countries[index].iso_3166_1];\n                \n                console.log(data);\n\n                this.setState({\n                    movieItems: data,\n                    mode: \"Normal\"\n                })\n            })\n            .catch(err => {\n                this.setState({\n                    mode: \"404\"\n                })\n            });\n\n        fetch(creditsInfo)\n            .then(res => res.json())\n            .then(data => {\n                for(let index = 0; index < data.cast.length; index++)\n                    if(data.cast[index].profile_path !== null)\n                        data.cast[index].profile_path = `${movieImageBaseUrl}original${data.cast[index].profile_path}`;\n                    else\n                        data.cast[index].profile_path = 'https://i.imgur.com/v2uZO3u.jpg';\n\n                console.log(data);\n\n                this.setState({\n                    creditsItems: data,\n                    creditsToggle: true\n                })\n            })\n            .catch(err => {\n                this.setState({\n                    mode: \"404\"\n                })\n            });\n    }\n\n    render () {\n        const {movieItems, creditsItems, mode, creditsToggle} = this.state;\n        const overviewURL = `${this.props.match.params.movieId}/overview`;\n\n        let targetSetting = \"_blank\";\n\n        if(movieItems.homepage === \"\")\n            targetSetting = \"_self\"\n\n        if(mode === \"Loading\") {\n            return (\n                <section className=\"inner\">\n                    <h2>Loading...</h2>\n                </section>\n            );\n        }\n        else if(mode === \"404\") {\n            return (\n                <section className=\"inner\">\n                    <h2>404 Not Found.</h2>\n                </section>\n            ); \n        }\n        return (\n            <section className=\"inner\">\n                <div>\n                    <div style={{width:'100%', display:'inline-block'}}>\n                        <a href={movieItems.homepage} target={targetSetting}><img src={movieItems.poster_path} style={{margin:'0%', float:'left'}} alt=\"\" width=\"15%\" /></a>\n                        <h2 style={{margin: '17% 0 0 0'}}>{movieItems.title}</h2>\n                    </div>\n                    <div id=\"overview\">\n                        <span style={{float: 'right', margin: '0 1%'}}><a href={overviewURL}>자세히보기</a></span>\n                        <MovieInfo movie={movieItems}/>\n                        <hr />\n                        {creditsToggle &&\n                            <CreditsInfo credits={creditsItems}/>\n                        }\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default MovieDetailPage;","import React, {Component} from 'react';\nimport {siteTitle, movieLang, countriesLang, movieApiBaseUrl, movieImageBaseUrl} from '../../../Config';\n\nclass MovieOverView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movieItems: [],\n            mode: \"Loading\"\n        }\n    }\n\n    async componentDidMount() {\n        const api_key = process.env.REACT_APP_MOVIEDB_API_KEY;\n\n        const movieId = this.props.match.params.movieId;\n\n        fetch(`${movieApiBaseUrl}${movieId}?api_key=${api_key}&language=ko-KR`)\n            .then(res => res.json())\n            .then(data => {\n                data.poster_path = `${movieImageBaseUrl}original${data.poster_path}`;\n\n                document.title = `${data.title} - ${siteTitle}`;  // change the title\n\n                // 언어 data값 문자열 한국어로 번역\n                for(let index = 0; index < data.spoken_languages.length; index++)\n                    data.spoken_languages[index].name = movieLang[data.spoken_languages[index].english_name];\n                \n                for(let index = 0; index < data.production_countries.length; index++)\n                    data.production_countries[index].name = countriesLang[data.production_countries[index].iso_3166_1];\n                \n                console.log(data);\n\n                this.setState({\n                    movieItems: data,\n                    mode: \"Normal\"\n                })\n            })\n            .catch(err => {\n                this.setState({\n                    mode: \"404\"\n                })\n            });\n    }\n\n    render () {\n        const {movieItems, mode} = this.state;\n\n        const release_date = new Date(movieItems.release_date); // 개봉연도만 가져오기 위한 상수 선언\n\n        const preURL = `../${this.props.match.params.movieId}`;\n\n        if(mode === \"Loading\") {\n            return (\n                <section className=\"inner\">\n                    <h2>Loading...</h2>\n                </section>\n            );\n        }\n        else if(mode === \"404\") {\n            return (\n                <section className=\"inner\">\n                    <h2>404 Not Found.</h2>\n                </section>\n            ); \n        }\n        return (\n            <section className=\"inner\">\n                <div>\n                    <p><a href={preURL}>[이전]</a></p>\n                    <h2><p>영화 정보</p></h2>\n                    <div id=\"overview\">\n                        <b>원제</b> {movieItems.original_title}\n                        <hr />\n                        <b>개봉연도</b> {release_date.getFullYear()}년\n                        <hr />\n                        <b>국가</b> {movieItems.production_countries.map((countries, index) => (<span key={countries.name}>{countries.name}{(index < movieItems.production_countries.length - 1) ? ',\\u00A0' : ''}</span>))}\n                        <hr />\n                        <b>장르</b> {movieItems.genres.map((genres, index) => (<span key={genres.name}>{genres.name}{(index < movieItems.genres.length - 1) ? ',\\u00A0' : ''}</span>))}\n                        <hr />\n                        <b>상영시간</b> {movieItems.runtime}분\n                        <hr />\n                        <b>상영언어</b> {movieItems.spoken_languages.map((lang, index) => (<span key={lang.name}>{lang.name}{(index < movieItems.spoken_languages.length -1)? ',\\u00A0' : ''}</span>))}\n                        <hr />\n                        <b>IMDB 평점</b> {movieItems.vote_average}\n                        <hr />\n                        <b>내용</b><br />\n                        {movieItems.overview}\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default MovieOverView;","import React, {useEffect} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport {siteTitle} from '../../Config';\n\nfunction LoginPage() {\n    useEffect(() => {\n        document.title=`로그인 - ${siteTitle}`;\n    }, [])\n\n    return (\n        <div>\n            <section className=\"inner\">\n                <div>\n                    <form method=\"post\">\n                        <fieldset>\n                            <legend>로그인</legend>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>ID</td>\n                                        <td><input type=\"text\" name=\"id\" required /></td>\n                                    </tr>\n                                    <tr>\n                                        <td>PW</td>\n                                        <td><input type=\"password\" name=\"pw\" required /></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <Button variant=\"secondary\">확인</Button>\n                            <Button variant=\"secondary\">ID/PW 찾기</Button>\n                            {/* <input type=\"submit\" value = \"확인\" />\n                            <input type=\"button\" value=\"ID/PW 찾기\"></input> */}\n                        </fieldset>\n                    </form>\n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default LoginPage\n","import React, {useEffect} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport {siteTitle} from '../../Config';\n\nfunction RegisterPage() {\n    useEffect(() => {\n        document.title=`회원가입 - ${siteTitle}`;\n    }, [])\n\n    return (\n        <div>\n            <section className=\"inner\">\n                <div>\n                    <form method=\"post\">\n                        <fieldset>\n                            <legend>회원가입</legend>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>ID</td>\n                                        <td><input type=\"text\" name=\"id\" required /></td>\n                                    </tr>\n                                    <tr>\n                                        <td>Mail</td>\n                                        <td><input type=\"text\" name=\"mail\" required /></td>\n                                    </tr>\n                                    <tr>\n                                        <td>PW</td>\n                                        <td><input type=\"password\" name=\"pw\" required /></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <Button variant=\"secondary\">확인</Button>\n                        </fieldset>\n                    </form>\n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default RegisterPage\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainPage from './components/Pages/LandingPage/LandingPage';\nimport MovieDetailPage from './components/Pages/MovieDetailPage/MovieDetailPage';\nimport MovieOverView from './components/Pages/MovieDetailPage/OverView/MovieOverView';\nimport Login from './components/Pages/MemberPage/LoginPage';\nimport Register from './components/Pages/MemberPage/RegisterPage';\nimport {Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <header>\n      <nav>\n        <div className=\"inner\">\n          <span id=\"logo\"><h1><a href=\"/\">MyMovieList</a></h1></span>\n          <div id=\"log\">\n            <span className=\"element\"><a href=\"/login\">로그인</a></span>\n            <span className=\"element\"><a href=\"/register\">회원가입</a></span>\n          </div>\n        </div>\n      </nav>\n    </header>\n    <Route exact path=\"/\" component={MainPage}></Route>\n    <Route exact path=\"/movie/:movieId\" component={MovieDetailPage}></Route>\n    <Route exact path=\"/movie/:movieId/overview\" component={MovieOverView}></Route>\n    <Route exact path=\"/login\" component={Login}></Route>\n    <Route exact path=\"/register\" component={Register}></Route>\n    <footer>\n      <hr></hr>\n      &copy; 2021 MyMovieList\n    </footer>\n  </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}